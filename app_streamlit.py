import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from core_logic import preprocess_data, cluster_analysis, churn_prediction, trend_forecasting, generate_pdf_report

# T√πy ch·ªânh giao di·ªán Streamlit
st.set_page_config(page_title="Ph√¢n T√≠ch H√†nh Vi Ng∆∞·ªùi Ti√™u D√πng", layout="wide", page_icon="üìä")
st.markdown("""
    <style>
    .stApp {
        background-color: #f9fafb;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        white-space: nowrap;
        background-color: #e5e7eb;
        border-radius: 4px;
        color: #1f2937;
        font-weight: 500;
        padding: 0 20px;
        display: flex;
        align-items: center;
    }
    .stTabs [data-baseweb="tab"]:hover {
        background-color: #d1d5db;
    }
    .stTabs [aria-selected="true"] {
        background-color: #3b82f6;
        color: white;
    }
    .stFileUploader label {
        font-size: 16px;
        color: #1f2937;
    }
    .stProgress > div > div > div {
        background-color: #3b82f6;
    }
    .stMarkdown h1 {
        color: #1f2937;
        border-bottom: 2px solid #3b82f6;
        padding-bottom: 8px;
    }
    .stMarkdown h2 {
        color: #1f2937;
        border-bottom: 1px solid #e5e7eb;
        padding-bottom: 6px;
    }
    </style>
""", unsafe_allow_html=True)

# H√†m t·∫°o dashboard
def create_dashboard(df, df_clusters, churn_report, prophet_df, forecast, ssd, silhouette_scores):
    try:
        st.subheader("T·ªïng Quan Ph√¢n T√≠ch")
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("T·ªïng S·ªë Kh√°ch H√†ng", f"{len(df):,}")
        with col2:
            st.metric("Chi Ti√™u Trung B√¨nh", f"{df['Expenses'].mean():,.2f}")
        with col3:
            st.metric("X√°c Su·∫•t Quay L·∫°i TB", f"{df_clusters['Churn_Probability'].mean():.2%}")
        with col4:
            st.metric("S·ªë C·ª•m", df_clusters['Cluster'].nunique())
        col1, col2 = st.columns(2)
        with col1:
            fig_pie = px.pie(df_clusters, names='Cluster', title='Ph√¢n B·ªë C·ª•m Kh√°ch H√†ng',
                            color_discrete_sequence=px.colors.qualitative.Pastel)
            fig_pie.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_pie, use_container_width=True)
        with col2:
            fig_bar = px.histogram(df, x='Education', title='Ph√¢n B·ªë Tr√¨nh ƒê·ªô H·ªçc V·∫•n',
                                  color='Education', 
                                  color_discrete_sequence=px.colors.qualitative.Pastel)
            fig_bar.update_layout(showlegend=False)
            st.plotly_chart(fig_bar, use_container_width=True)
        st.subheader("Xu H∆∞·ªõng Chi Ti√™u")
        fig_trend = go.Figure()
        fig_trend.add_trace(go.Scatter(
            x=prophet_df['ds'], y=prophet_df['y'], 
            mode='lines', name='Th·ª±c T·∫ø',
            line=dict(color='#3b82f6', width=2)
        ))
        fig_trend.add_trace(go.Scatter(
            x=forecast['ds'], y=forecast['yhat'], 
            mode='lines', name='D·ª± B√°o',
            line=dict(color='#10b981', width=2, dash='dot')
        ))
        fig_trend.add_trace(go.Scatter(
            x=forecast['ds'], y=forecast['yhat_upper'], 
            fill=None, mode='lines',
            line=dict(width=0), showlegend=False
        ))
        fig_trend.add_trace(go.Scatter(
            x=forecast['ds'], y=forecast['yhat_lower'], 
            fill='tonexty', mode='lines',
            fillcolor='rgba(59, 130, 246, 0.2)',
            line=dict(width=0), name='Kho·∫£ng Tin C·∫≠y'
        ))
        fig_trend.update_layout(
            title='Xu H∆∞·ªõng Chi Ti√™u Theo Th·ªùi Gian',
            xaxis_title='Ng√†y',
            yaxis_title='Chi Ti√™u',
            hovermode='x unified',
            template='plotly_white'
        )
        st.plotly_chart(fig_trend, use_container_width=True)
        st.subheader("Ph√¢n T√≠ch T·ª´ng C·ª•m")
        cluster_summary = df_clusters.groupby('Cluster').agg({
            'Income': ['mean', 'median', 'std'], 
            'Expenses': ['mean', 'median', 'std'], 
            'TotalNumPurchases': ['mean', 'median'], 
            'Churn_Probability': 'mean',
            'Kids': 'mean'
        }).round(2)
        st.dataframe(cluster_summary.style.background_gradient(cmap='Blues'))
        st.subheader("X√°c ƒê·ªãnh S·ªë C·ª•m T·ªëi ∆Øu")
        col1, col2 = st.columns(2)
        with col1:
            fig_elbow = go.Figure()
            fig_elbow.add_trace(go.Scatter(
                x=list(range(2, len(ssd)+2)), y=ssd, 
                mode='lines+markers', 
                line=dict(color='#3b82f6', width=2),
                marker=dict(size=8, color='#3b82f6')
            ))
            fig_elbow.update_layout(
                title='Elbow Method',
                xaxis_title='S·ªë C·ª•m',
                yaxis_title='T·ªïng B√¨nh Ph∆∞∆°ng Kho·∫£ng C√°ch',
                template='plotly_white'
            )
            st.plotly_chart(fig_elbow, use_container_width=True)
        with col2:
            fig_silhouette = go.Figure()
            fig_silhouette.add_trace(go.Scatter(
                x=list(range(2, len(silhouette_scores)+2)), y=silhouette_scores, 
                mode='lines+markers',
                line=dict(color='#10b981', width=2),
                marker=dict(size=8, color='#10b981')
            ))
            fig_silhouette.update_layout(
                title='Silhouette Score',
                xaxis_title='S·ªë C·ª•m',
                yaxis_title='ƒêi·ªÉm Silhouette',
                template='plotly_white'
            )
            st.plotly_chart(fig_silhouette, use_container_width=True)
        st.subheader("T·∫£i Xu·ªëng K·∫øt Qu·∫£")
        col1, col2 = st.columns(2)
        with col1:
            pdf_buffer = generate_pdf_report(df, df_clusters, churn_report, prophet_df, forecast)
            if pdf_buffer:
                st.download_button(
                    label="üìÑ T·∫£i xu·ªëng B√°o C√°o PDF",
                    data=pdf_buffer,
                    file_name="customer_analysis_report.pdf",
                    mime="application/pdf",
                    use_container_width=True
                )
        with col2:
            csv = df_clusters.to_csv(index=False)
            st.download_button(
                label="üìä T·∫£i xu·ªëng d·ªØ li·ªáu c·ª•m (CSV)",
                data=csv,
                file_name="customer_clusters.csv",
                mime="text/csv",
                use_container_width=True
            )
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o dashboard: {str(e)}")

# Giao di·ªán ch√≠nh
def main():
    st.title("üìä Ph√¢n T√≠ch Kh√°ch H√†ng")
    st.markdown("""
        ·ª®ng d·ª•ng n√†y gi√∫p ph√¢n t√≠ch d·ªØ li·ªáu kh√°ch h√†ng, bao g·ªìm th·ªëng k√™, ph√¢n c·ª•m, d·ª± ƒëo√°n kh√°ch h√†ng quay l·∫°i, 
        d·ª± b√°o xu h∆∞·ªõng chi ti√™u, v√† ma tr·∫≠n t∆∞∆°ng quan. Vui l√≤ng t·∫£i file CSV theo ƒë·ªãnh d·∫°ng y√™u c·∫ßu.
        
        **üìå Y√™u c·∫ßu file CSV:** Ph·∫£i ch·ª©a c√°c c·ªôt b·∫Øt bu·ªôc nh∆∞ ID, Dt_Customer, Income, Kidhome, Teenhome, 
        Recency, c√°c c·ªôt Mnt (chi ti√™u), Num (s·ªë l·∫ßn mua), AcceptedCmp (chi·∫øn d·ªãch), Complain, Response.
    """)
    if 'df' not in st.session_state:
        st.session_state.df = None
        st.session_state.numerical_columns = None
        st.session_state.categorical_columns = None
        st.session_state.binary_columns = None
        st.session_state.df_clusters = None
        st.session_state.X_scaled = None
        st.session_state.scaler = None
        st.session_state.X_encoded = None
        st.session_state.ssd = None
        st.session_state.silhouette_scores = None
        st.session_state.churn_report = None
        st.session_state.prophet_df = None
        st.session_state.forecast = None
    with st.expander("üì§ T·∫£i l√™n d·ªØ li·ªáu", expanded=True):
        uploaded_file = st.file_uploader("Ch·ªçn file CSV", type="csv", help="File CSV ph·∫£i c√≥ ƒë·ªãnh d·∫°ng ph√π h·ª£p")
        if uploaded_file:
            with st.spinner("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu..."):
                try:
                    df = pd.read_csv(uploaded_file, sep='\t')
                    df, numerical_columns, categorical_columns, binary_columns, error = preprocess_data(df)
                    if error:
                        st.error(f"‚ùå L·ªói: {error}")
                    else:
                        st.session_state.df = df
                        st.session_state.numerical_columns = numerical_columns
                        st.session_state.categorical_columns = categorical_columns
                        st.session_state.binary_columns = binary_columns
                        st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i v√† x·ª≠ l√Ω th√†nh c√¥ng!")
                except Exception as e:
                    st.error(f"‚ùå L·ªói khi ƒë·ªçc file: {str(e)}")
    tabs = st.tabs(["üìä T·ªïng Quan", "üìà Th·ªëng K√™", "üîç Ph√¢n C·ª•m", "üéØ D·ª± ƒêo√°n", "üìÖ D·ª± B√°o", "üîÑ T∆∞∆°ng Quan", "üìñ H∆∞·ªõng D·∫´n"])
    with tabs[0]:
        st.header("Dashboard T·ªïng Quan")
        if st.session_state.df is not None:
            with st.spinner("ƒêang ph√¢n t√≠ch d·ªØ li·ªáu..."):
                if st.session_state.silhouette_scores is None:
                    default_clusters = 3
                else:
                    default_clusters = np.argmax(st.session_state.silhouette_scores) + 2
                df_clusters, X_scaled, scaler, X_encoded, ssd, silhouette_scores, error = cluster_analysis(
                    st.session_state.df, st.session_state.numerical_columns, n_clusters=default_clusters)
                if error:
                    st.error(f"‚ùå L·ªói ph√¢n c·ª•m: {error}")
                else:
                    df_clusters, churn_report, error = churn_prediction(df_clusters, X_scaled)
                    if error:
                        st.error(f"‚ùå L·ªói d·ª± ƒëo√°n: {error}")
                    else:
                        prophet_df, forecast, error = trend_forecasting(st.session_state.df)
                        if error:
                            st.error(f"‚ùå L·ªói d·ª± b√°o: {error}")
                        else:
                            st.session_state.df_clusters = df_clusters
                            st.session_state.X_scaled = X_scaled
                            st.session_state.scaler = scaler
                            st.session_state.X_encoded = X_encoded
                            st.session_state.ssd = ssd
                            st.session_state.silhouette_scores = silhouette_scores
                            st.session_state.churn_report = churn_report
                            st.session_state.prophet_df = prophet_df
                            st.session_state.forecast = forecast
                            create_dashboard(st.session_state.df, df_clusters, churn_report, prophet_df, forecast, ssd, silhouette_scores)
        else:
            st.info("‚ÑπÔ∏è Vui l√≤ng t·∫£i file CSV ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")
    with tabs[1]:
        st.header("Th·ªëng K√™ D·ªØ Li·ªáu")
        if st.session_state.df is not None:
            st.write("### Th·ªëng K√™ M√¥ T·∫£")
            st.dataframe(st.session_state.df.describe().style.background_gradient(cmap='Blues'))
            col1, col2 = st.columns(2)
            with col1:
                fig_hist = px.histogram(st.session_state.df, x='Income', title='Ph√¢n B·ªë Thu Nh·∫≠p',
                                       nbins=20, color_discrete_sequence=['#3b82f6'])
                st.plotly_chart(fig_hist, use_container_width=True)
            with col2:
                fig_box = px.box(st.session_state.df, y='Expenses', title='Boxplot Chi Ti√™u',
                                 color_discrete_sequence=['#10b981'])
                st.plotly_chart(fig_box, use_container_width=True)
            for column in st.session_state.numerical_columns:
                fig_hist = px.histogram(st.session_state.df, x=column, title=f'Ph√¢n B·ªë c·ªßa {column}', 
                                       nbins=20, color_discrete_sequence=['#3b82f6'])
                st.plotly_chart(fig_hist, use_container_width=True)
            for column in st.session_state.categorical_columns + st.session_state.binary_columns:
                fig_count = px.histogram(st.session_state.df, x=column, title=f'Ph√¢n B·ªë c·ªßa {column}',
                                         color=column, color_discrete_sequence=px.colors.qualitative.Pastel)
                fig_count.update_layout(showlegend=False)
                st.plotly_chart(fig_count, use_container_width=True)
            csv = st.session_state.df.describe().to_csv()
            st.download_button(
                label="üì• T·∫£i xu·ªëng th·ªëng k√™ (CSV)",
                data=csv,
                file_name="statistics.csv",
                mime="text/csv"
            )
        else:
            st.info("‚ÑπÔ∏è Vui l√≤ng t·∫£i file CSV ƒë·ªÉ xem th·ªëng k√™.")
    with tabs[2]:
        st.header("Ph√¢n C·ª•m Kh√°ch H√†ng")
        if st.session_state.df is not None:
            if st.session_state.silhouette_scores is None:
                default_n_clusters = 3
            else:
                default_n_clusters = np.argmax(st.session_state.silhouette_scores) + 2
            n_clusters = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng c·ª•m", min_value=2, max_value=10, value=default_n_clusters)
            with st.spinner("ƒêang ph√¢n c·ª•m..."):
                df_clusters, X_scaled, scaler, X_encoded, ssd, silhouette_scores, error = cluster_analysis(
                    st.session_state.df, st.session_state.numerical_columns, n_clusters)
                if error:
                    st.error(f"‚ùå L·ªói ph√¢n c·ª•m: {error}")
                else:
                    st.write(f"### S·ªë c·ª•m ƒë∆∞·ª£c ch·ªçn: {n_clusters}")
                    col1, col2 = st.columns(2)
                    with col1:
                        fig1 = px.scatter(df_clusters, x='Income', y='Expenses', color='Cluster',
                                         title='Ph√¢n C·ª•m (Thu Nh·∫≠p vs Chi Ti√™u)',
                                         color_discrete_sequence=px.colors.qualitative.Pastel)
                        st.plotly_chart(fig1, use_container_width=True)
                    with col2:
                        fig2 = px.scatter(df_clusters, x='Income', y='TotalNumPurchases', color='Cluster',
                                         title='Ph√¢n C·ª•m (Thu Nh·∫≠p vs T·ªïng S·ªë Mua H√†ng)',
                                         color_discrete_sequence=px.colors.qualitative.Pastel)
                        st.plotly_chart(fig2, use_container_width=True)
                    for col in st.session_state.numerical_columns:
                        fig = px.box(df_clusters, x='Cluster', y=col, title=f'Boxplot c·ªßa {col} theo C·ª•m',
                                     color='Cluster', color_discrete_sequence=px.colors.qualitative.Pastel)
                        fig.update_layout(showlegend=False)
                        st.plotly_chart(fig, use_container_width=True)
                    for col in st.session_state.categorical_columns:
                        data = df_clusters.groupby(['Cluster', col]).size().unstack().fillna(0)
                        fig = go.Figure(data=[
                            go.Bar(name=val, x=data.index, y=data[val]) for val in data.columns
                        ])
                        fig.update_layout(
                            barmode='stack', 
                            title=f'Ph√¢n B·ªë {col} Theo C·ª•m',
                            xaxis_title='C·ª•m', 
                            yaxis_title='S·ªë L∆∞·ª£ng',
                            legend_title=col
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    csv = df_clusters.to_csv(index=False)
                    st.download_button(
                        label="üì• T·∫£i xu·ªëng d·ªØ li·ªáu c·ª•m (CSV)",
                        data=csv,
                        file_name="customer_clusters.csv",
                        mime="text/csv"
                    )
        else:
            st.info("‚ÑπÔ∏è Vui l√≤ng t·∫£i file CSV ƒë·ªÉ ph√¢n c·ª•m.")
    with tabs[3]:
        st.header("D·ª± ƒêo√°n Kh√°ch H√†ng Quay L·∫°i")
        if st.session_state.df_clusters is not None and 'Churn_Probability' in st.session_state.df_clusters.columns:
            st.write("### B√°o C√°o D·ª± ƒêo√°n")
            st.json(st.session_state.churn_report)
            st.write("### X√°c Su·∫•t Kh√°ch H√†ng Quay L·∫°i")
            st.dataframe(st.session_state.df_clusters[['Income', 'Expenses', 'Churn_Probability']].sort_values('Churn_Probability', ascending=False))
            fig = px.histogram(st.session_state.df_clusters, x='Churn_Probability', 
                              title='Ph√¢n B·ªë X√°c Su·∫•t Quay L·∫°i',
                              nbins=20, color_discrete_sequence=['#3b82f6'])
            st.plotly_chart(fig, use_container_width=True)
            csv = st.session_state.df_clusters[['Income', 'Expenses', 'Churn_Probability']].to_csv(index=False)
            st.download_button(
                label="üì• T·∫£i xu·ªëng d·ªØ li·ªáu d·ª± ƒëo√°n (CSV)",
                data=csv,
                file_name="churn_predictions.csv",
                mime="text/csv"
            )
        else:
            st.info("‚ÑπÔ∏è Vui l√≤ng t·∫£i file CSV v√† ch·∫°y ph√¢n t√≠ch t·ªïng quan tr∆∞·ªõc.")
    with tabs[4]:
        st.header("D·ª± B√°o Xu H∆∞·ªõng Chi Ti√™u")
        if st.session_state.prophet_df is not None and st.session_state.forecast is not None:
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=st.session_state.prophet_df['ds'], y=st.session_state.prophet_df['y'], 
                mode='lines', name='Th·ª±c T·∫ø',
                line=dict(color='#3b82f6', width=2)
            ))
            fig.add_trace(go.Scatter(
                x=st.session_state.forecast['ds'], y=st.session_state.forecast['yhat'], 
                mode='lines', name='D·ª± B√°o',
                line=dict(color='#10b981', width=2, dash='dot')
            ))
            fig.add_trace(go.Scatter(
                x=st.session_state.forecast['ds'], y=st.session_state.forecast['yhat_upper'], 
                fill=None, mode='lines', line=dict(width=0), showlegend=False
            ))
            fig.add_trace(go.Scatter(
                x=st.session_state.forecast['ds'], y=st.session_state.forecast['yhat_lower'], 
                fill='tonexty', mode='lines',
                fillcolor='rgba(59, 130, 246, 0.2)',
                line=dict(width=0), name='Kho·∫£ng Tin C·∫≠y'
            ))
            fig.update_layout(
                title='D·ª± B√°o Chi Ti√™u Theo Th·ªùi Gian',
                xaxis_title='Ng√†y',
                yaxis_title='Chi Ti√™u',
                hovermode='x unified',
                template='plotly_white'
            )
            st.plotly_chart(fig, use_container_width=True)
            st.write("### D·ªØ Li·ªáu D·ª± B√°o")
            st.dataframe(st.session_state.forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(12))
            csv = st.session_state.forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].to_csv(index=False)
            st.download_button(
                label="üì• T·∫£i xu·ªëng d·ªØ li·ªáu d·ª± b√°o (CSV)",
                data=csv,
                file_name="forecast.csv",
                mime="text/csv"
            )
        else:
            st.info("‚ÑπÔ∏è Vui l√≤ng t·∫£i file CSV v√† ch·∫°y ph√¢n t√≠ch t·ªïng quan tr∆∞·ªõc.")
    with tabs[5]:
        st.header("Ma Tr·∫≠n T∆∞∆°ng Quan")
        if st.session_state.df is not None:
            corr_df = st.session_state.df.corr(numeric_only=True)
            fig = go.Figure(data=go.Heatmap(
                z=corr_df.values,
                x=corr_df.columns,
                y=corr_df.index,
                colorscale='RdBu',
                zmin=-1,
                zmax=1,
                hoverongaps=False
            ))
            fig.update_layout(
                title='Ma Tr·∫≠n T∆∞∆°ng Quan Gi·ªØa C√°c Bi·∫øn',
                xaxis_showgrid=False,
                yaxis_showgrid=False,
                xaxis_zeroline=False,
                yaxis_zeroline=False,
                height=600
            )
            st.plotly_chart(fig, use_container_width=True)
            csv = corr_df.to_csv()
            st.download_button(
                label="üì• T·∫£i xu·ªëng ma tr·∫≠n t∆∞∆°ng quan (CSV)",
                data=csv,
                file_name="correlation_matrix.csv",
                mime="text/csv"
            )
        else:
            st.info("‚ÑπÔ∏è Vui l√≤ng t·∫£i file CSV ƒë·ªÉ xem ma tr·∫≠n t∆∞∆°ng quan.")
    with tabs[6]:
        st.header("H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng")
        st.markdown("""
            ### üìå H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng
            1. **T·∫£i file CSV**:
               - T·∫£i file CSV m·ªôt l·∫ßn ·ªü ph·∫ßn ƒë·∫ßu giao di·ªán. File c·∫ßn c√≥ ƒë·ªãnh d·∫°ng gi·ªëng file m·∫´u.
               - C√°c c·ªôt b·∫Øt bu·ªôc: `ID`, `Dt_Customer` (dd-mm-yyyy), `Income`, `Kidhome`, `Teenhome`, 
                 `Recency`, `MntWines`, `MntFruits`, `MntMeatProducts`, `MntFishProducts`, `MntSweetProducts`, `MntGoldProds`,
                 `NumDealsPurchases`, `NumWebPurchases`, `NumCatalogPurchases`, `NumStorePurchases`, 
                 `AcceptedCmp1`, `AcceptedCmp2`, `AcceptedCmp3`, `AcceptedCmp4`, `AcceptedCmp5`, `Complain`, `Response`.
            2. **Ch·ªçn tab ph√¢n t√≠ch**:
               - **T·ªïng Quan**: Dashboard t√≥m t·∫Øt v·ªõi c√°c s·ªë li·ªáu quan tr·ªçng
               - **Th·ªëng K√™**: Th·ªëng k√™ m√¥ t·∫£ v√† ph√¢n b·ªë d·ªØ li·ªáu
               - **Ph√¢n C·ª•m**: Ph√¢n nh√≥m kh√°ch h√†ng v·ªõi K-Means
               - **D·ª± ƒêo√°n**: D·ª± ƒëo√°n kh·∫£ nƒÉng kh√°ch h√†ng quay l·∫°i
               - **D·ª± B√°o**: D·ª± b√°o xu h∆∞·ªõng chi ti√™u trong t∆∞∆°ng lai
               - **T∆∞∆°ng Quan**: M·ªëi quan h·ªá gi·ªØa c√°c bi·∫øn s·ªë
               - **H∆∞·ªõng D·∫´n**: H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng chi ti·∫øt
            3. **T·∫£i xu·ªëng k·∫øt qu·∫£**:
               - T·∫£i xu·ªëng d·ªØ li·ªáu CSV ho·∫∑c b√°o c√°o PDF t·ª´ c√°c tab t∆∞∆°ng ·ª©ng
            ### üõ†Ô∏è Y√™u c·∫ßu h·ªá th·ªëng
            - M√¥i tr∆∞·ªùng Anaconda v·ªõi Python 3.9+
            - C√°c th∆∞ vi·ªán c·∫ßn thi·∫øt: `streamlit`, `pandas`, `numpy`, `scipy`, `scikit-learn`, `plotly`, `prophet`, `reportlab`
            ### ‚ö†Ô∏è Kh·∫Øc ph·ª•c l·ªói th∆∞·ªùng g·∫∑p
            - **L·ªói thi·∫øu c·ªôt**: Ki·ªÉm tra file CSV c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng kh√¥ng
            - **L·ªói ƒë·ªãnh d·∫°ng ng√†y**: ƒê·∫£m b·∫£o c·ªôt `Dt_Customer` c√≥ ƒë·ªãnh d·∫°ng `dd-mm-yyyy`
            - **L·ªói Prophet**: C√†i ƒë·∫∑t l·∫°i Prophet v·ªõi `pip install prophet` ho·∫∑c kh·ªüi ƒë·ªông l·∫°i kernel
            ### üìß Li√™n h·ªá h·ªó tr·ª£
            N·∫øu c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá qua email: doduytoan2201@gmail.com
        """)

if __name__ == "__main__":
    main()