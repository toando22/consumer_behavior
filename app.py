import numpy as np
import pandas as pd
from scipy import stats
import warnings
import logging
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from prophet import Prophet
from prophet.serialize import model_to_json, model_from_json
import io
import base64
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
import tempfile
import os

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# T·∫Øt c·∫£nh b√°o
warnings.filterwarnings("ignore")

# T√πy ch·ªânh giao di·ªán Streamlit
st.set_page_config(page_title="Ph√¢n T√≠ch H√†nh Vi Ng∆∞·ªùi Ti√™u D√πng", layout="wide", page_icon="üìä")
st.markdown("""
    <style>
    .stApp {
        background-color: #f9fafb;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        white-space: nowrap;
        background-color: #e5e7eb;
        border-radius: 4px;
        color: #1f2937;
        font-weight: 500;
        padding: 0 20px;
        display: flex;
        align-items: center;
    }
    .stTabs [data-baseweb="tab"]:hover {
        background-color: #d1d5db;
    }
    .stTabs [aria-selected="true"] {
        background-color: #3b82f6;
        color: white;
    }
    .stFileUploader label {
        font-size: 16px;
        color: #1f2937;
    }
    .stProgress > div > div > div {
        background-color: #3b82f6;
    }
    .stMarkdown h1 {
        color: #1f2937;
        border-bottom: 2px solid #3b82f6;
        padding-bottom: 8px;
    }
    .stMarkdown h2 {
        color: #1f2937;
        border-bottom: 1px solid #e5e7eb;
        padding-bottom: 6px;
    }
    </style>
""", unsafe_allow_html=True)

# H√†m x·ª≠ l√Ω d·ªØ li·ªáu
@st.cache_data(show_spinner="ƒêang x·ª≠ l√Ω d·ªØ li·ªáu...")
def preprocess_data(df):
    try:
        required_columns = ['ID', 'Dt_Customer', 'Income', 'Kidhome', 'Teenhome', 'Recency', 'MntWines', 'MntFruits',
                           'MntMeatProducts', 'MntFishProducts', 'MntSweetProducts', 'MntGoldProds', 'NumDealsPurchases',
                           'NumWebPurchases', 'NumCatalogPurchases', 'NumStorePurchases', 'AcceptedCmp1', 'AcceptedCmp2',
                           'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'Complain', 'Response']
        missing_cols = [col for col in required_columns if col not in df.columns]
        if missing_cols:
            raise ValueError(f"Thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: {', '.join(missing_cols)}")
        
        # T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh thay ƒë·ªïi dataframe g·ªëc
        df = df.copy()
        
        # X√≥a c√°c c·ªôt kh√¥ng c·∫ßn thi·∫øt
        df.drop(['ID', 'Z_CostContact', 'Z_Revenue'], axis=1, inplace=True, errors='ignore')
        
        # Chuy·ªÉn ƒë·ªïi c·ªôt Dt_Customer th√†nh datetime
        df['Dt_Customer'] = pd.to_datetime(df['Dt_Customer'], format="%d-%m-%Y", errors='coerce')
        if df['Dt_Customer'].isna().any():
            invalid_dates = df[df['Dt_Customer'].isna()].index.tolist()
            raise ValueError(f"C·ªôt Dt_Customer ch·ª©a gi√° tr·ªã kh√¥ng h·ª£p l·ªá t·∫°i c√°c h√†ng: {invalid_dates}")
        
        latest_date = df['Dt_Customer'].max()
        df['Days_is_client'] = (latest_date - df['Dt_Customer']).dt.days

        # Chu·∫©n h√≥a c√°c c·ªôt ph√¢n lo·∫°i
        df['Marital_Status'] = df['Marital_Status'].replace(['Married', 'Together'], 'Partner')
        df['Marital_Status'] = df['Marital_Status'].replace(['Divorced', 'Widow', 'Alone', 'YOLO', 'Absurd'], 'Single')
        df['Education'] = df['Education'].replace(['PhD', 'Master'], 'Postgraduate')
        df['Education'] = df['Education'].replace(['2n Cycle', 'Graduation'], 'Graduate')
        df['Education'] = df['Education'].replace(['Basic'], 'Undergraduate')

        # T·∫°o c√°c c·ªôt t·ªïng h·ª£p
        df['Kids'] = df['Kidhome'] + df['Teenhome']
        df['Expenses'] = df['MntWines'] + df['MntFruits'] + df['MntMeatProducts'] + \
                         df['MntFishProducts'] + df['MntSweetProducts'] + df['MntGoldProds']
        df['TotalAcceptedCmp'] = df['AcceptedCmp1'] + df['AcceptedCmp2'] + \
                                 df['AcceptedCmp3'] + df['AcceptedCmp4'] + df['AcceptedCmp5']
        df['TotalNumPurchases'] = df['NumWebPurchases'] + df['NumCatalogPurchases'] + \
                                  df['NumStorePurchases'] + df['NumDealsPurchases']

        # Ch·ªçn c√°c c·ªôt c·∫ßn thi·∫øt
        selected_columns = ['Education', 'Marital_Status', 'Income', 'Kids', 'Days_is_client', 
                           'Recency', 'Expenses', 'TotalNumPurchases', 'TotalAcceptedCmp', 
                           'Complain', 'Response', 'Dt_Customer']
        df = df[selected_columns]

        # X√≥a h√†ng tr√πng l·∫∑p v√† gi√° tr·ªã thi·∫øu
        df.drop_duplicates(inplace=True)
        df.dropna(inplace=True)

        # X√≥a gi√° tr·ªã ngo·∫°i lai
        numerical_columns = ['Income', 'Kids', 'Days_is_client', 'Recency', 
                            'Expenses', 'TotalNumPurchases', 'TotalAcceptedCmp']
        z_scores = pd.DataFrame(stats.zscore(df[numerical_columns]), columns=numerical_columns)
        outliers = z_scores[(np.abs(z_scores) > 3).any(axis=1)]
        df = df.drop(outliers.index)

        # Ph√¢n lo·∫°i c·ªôt
        binary_columns = [col for col in df.columns if df[col].nunique() == 2 and col != 'Dt_Customer']
        categorical_columns = [col for col in df.columns if 2 < df[col].nunique() < 10 and col != 'Dt_Customer']
        
        return df, numerical_columns, categorical_columns, binary_columns, None
    except Exception as e:
        logger.error(f"L·ªói x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}", exc_info=True)
        return None, None, None, None, str(e)

# H√†m ph√¢n c·ª•m kh√°ch h√†ng
@st.cache_data(show_spinner="ƒêang ph√¢n c·ª•m d·ªØ li·ªáu...")
def cluster_analysis(df, numerical_columns, n_clusters):
    try:
        if df is None or len(df) == 0:
            raise ValueError("D·ªØ li·ªáu ƒë·∫ßu v√†o tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá")
            
        categorical_columns = df.select_dtypes(include=['object']).columns
        X_encoded = pd.get_dummies(df.drop(columns=['Dt_Customer']), columns=categorical_columns, drop_first=True, dtype=int)
        
        # Ki·ªÉm tra d·ªØ li·ªáu sau khi m√£ h√≥a
        if X_encoded.shape[0] == 0:
            raise ValueError("Kh√¥ng c√≥ d·ªØ li·ªáu sau khi m√£ h√≥a")
            
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X_encoded)

        # T√≠nh to√°n Elbow v√† Silhouette
        ssd = []
        silhouette_scores = []
        range_n_clusters = range(2, min(11, X_scaled.shape[0]))  # ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° s·ªë m·∫´u
        
        for n in range_n_clusters:
            kmeans_temp = KMeans(n_clusters=n, max_iter=50, random_state=101, n_init=10)
            kmeans_temp.fit(X_scaled)
            ssd.append(kmeans_temp.inertia_)
            
            # Silhouette score y√™u c·∫ßu √≠t nh·∫•t 2 c·ª•m v√† √≠t nh·∫•t 2 m·∫´u m·ªói c·ª•m
            if n > 1 and all(np.bincount(kmeans_temp.labels_) > 1):
                score = silhouette_score(X_scaled, kmeans_temp.labels_)
                silhouette_scores.append(score)
            else:
                silhouette_scores.append(0)

        # Ph√¢n c·ª•m v·ªõi s·ªë c·ª•m ƒë∆∞·ª£c ch·ªçn
        kmeans = KMeans(n_clusters=n_clusters, max_iter=50, random_state=101, n_init=10)
        y_kmeans = kmeans.fit_predict(X_scaled)

        df_clusters = df.copy()
        df_clusters['Cluster'] = y_kmeans
        return df_clusters, X_scaled, scaler, X_encoded, ssd, silhouette_scores, None
    except Exception as e:
        logger.error(f"L·ªói ph√¢n c·ª•m: {str(e)}", exc_info=True)
        return None, None, None, None, None, None, str(e)

# H√†m d·ª± ƒëo√°n kh√°ch h√†ng quay l·∫°i
@st.cache_data(show_spinner="ƒêang d·ª± ƒëo√°n kh√°ch h√†ng quay l·∫°i...")
def churn_prediction(df, X_scaled):
    try:
        if df is None or X_scaled is None:
            raise ValueError("D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá")
            
        if 'Response' not in df.columns:
            raise ValueError("Thi·∫øu c·ªôt 'Response' trong d·ªØ li·ªáu")
            
        X = X_scaled
        y = df['Response']
        
        # Ki·ªÉm tra n·∫øu ch·ªâ c√≥ 1 l·ªõp trong y
        if len(np.unique(y)) < 2:
            raise ValueError("D·ªØ li·ªáu ch·ªâ ch·ª©a m·ªôt l·ªõp, kh√¥ng th·ªÉ ph√¢n lo·∫°i")
            
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)
        rf_model = RandomForestClassifier(n_estimators=100, random_state=101)
        rf_model.fit(X_train, y_train)
        y_pred = rf_model.predict(X_test)
        churn_report = classification_report(y_test, y_pred, output_dict=True)
        churn_probability = rf_model.predict_proba(X)[:, 1]
        df['Churn_Probability'] = churn_probability
        return df, churn_report, None
    except Exception as e:
        logger.error(f"L·ªói d·ª± ƒëo√°n kh√°ch h√†ng: {str(e)}", exc_info=True)
        return None, None, str(e)

# H√†m d·ª± b√°o xu h∆∞·ªõng
@st.cache_data(show_spinner="ƒêang d·ª± b√°o xu h∆∞·ªõng...")
def trend_forecasting(df):
    try:
        if df is None or len(df) == 0:
            raise ValueError("D·ªØ li·ªáu ƒë·∫ßu v√†o tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá")
            
        if 'Dt_Customer' not in df.columns or 'Expenses' not in df.columns:
            raise ValueError("Thi·∫øu c·ªôt 'Dt_Customer' ho·∫∑c 'Expenses'")
            
        prophet_df = df[['Dt_Customer', 'Expenses']].copy()
        prophet_df['Dt_Customer'] = pd.to_datetime(prophet_df['Dt_Customer'], format="%d-%m-%Y", errors='coerce')
        
        # Ki·ªÉm tra d·ªØ li·ªáu ng√†y
        if prophet_df['Dt_Customer'].isna().any():
            invalid_dates = prophet_df[prophet_df['Dt_Customer'].isna()].index.tolist()
            raise ValueError(f"C·ªôt Dt_Customer ch·ª©a gi√° tr·ªã kh√¥ng h·ª£p l·ªá t·∫°i c√°c h√†ng: {invalid_dates}")
            
        prophet_df = prophet_df.groupby(prophet_df['Dt_Customer'].dt.to_period('M').dt.to_timestamp())['Expenses'].sum().reset_index()
        prophet_df.columns = ['ds', 'y']
        
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng ƒëi·ªÉm d·ªØ li·ªáu
        if len(prophet_df) < 2:
            raise ValueError("Kh√¥ng ƒë·ªß d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªÉ d·ª± b√°o (c·∫ßn √≠t nh·∫•t 2 ƒëi·ªÉm d·ªØ li·ªáu)")
            
        # T·∫°o v√† hu·∫•n luy·ªán m√¥ h√¨nh Prophet
        prophet_model = Prophet(seasonality_mode='multiplicative')
        prophet_model.fit(prophet_df)
        
        # T·∫°o d·ªØ li·ªáu t∆∞∆°ng lai v√† d·ª± b√°o
        future = prophet_model.make_future_dataframe(periods=12, freq='M')
        forecast = prophet_model.predict(future)
        
        return prophet_df, forecast, None
    except Exception as e:
        logger.error(f"L·ªói d·ª± b√°o xu h∆∞·ªõng: {str(e)}", exc_info=True)
        return None, None, str(e)

# H√†m t·∫°o b√°o c√°o PDF
def generate_pdf_report(df, df_clusters, churn_report, prophet_df, forecast):
    try:
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []

        # Ti√™u ƒë·ªÅ
        title_style = styles['Title']
        title_style.alignment = 1  # Center alignment
        story.append(Paragraph("B√°o C√°o Ph√¢n T√≠ch Kh√°ch H√†ng", title_style))
        story.append(Spacer(1, 24))

        # T·ªïng quan
        heading2_style = styles['Heading2']
        heading2_style.textColor = colors.HexColor('#3b82f6')
        story.append(Paragraph("1. T·ªïng Quan", heading2_style))
        
        # T·∫°o b·∫£ng t·ªïng quan
        overview_data = [
            ["Ch·ªâ s·ªë", "Gi√° tr·ªã"],
            ["T·ªïng s·ªë kh√°ch h√†ng", f"{len(df):,}"],
            ["Chi ti√™u trung b√¨nh", f"{df['Expenses'].mean():,.2f}"],
            ["X√°c su·∫•t quay l·∫°i TB", f"{df_clusters['Churn_Probability'].mean():.2%}"],
            ["S·ªë c·ª•m kh√°ch h√†ng", f"{df_clusters['Cluster'].nunique()}"]
        ]
        
        overview_table = Table(overview_data, colWidths=[200, 100])
        overview_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3b82f6')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#f3f4f6')),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#d1d5db')),
        ]))
        story.append(overview_table)
        story.append(Spacer(1, 24))

        # Ph√¢n c·ª•m
        story.append(Paragraph("2. Ph√¢n C·ª•m Kh√°ch H√†ng", heading2_style))
        cluster_summary = df_clusters.groupby('Cluster').agg({
            'Income': 'mean', 
            'Expenses': 'mean', 
            'TotalNumPurchases': 'mean', 
            'Churn_Probability': 'mean',
            'Kids': 'mean'
        }).round(2).reset_index()
        
        cluster_data = [['C·ª•m', 'Thu Nh·∫≠p TB', 'Chi Ti√™u TB', 'S·ªë Mua H√†ng TB', 'X√°c Su·∫•t Quay L·∫°i TB', 'S·ªë Con TB']]
        for _, row in cluster_summary.iterrows():
            cluster_data.append([
                str(row['Cluster']),
                f"{row['Income']:,.2f}",
                f"{row['Expenses']:,.2f}",
                f"{row['TotalNumPurchases']:.2f}",
                f"{row['Churn_Probability']:.2%}",
                f"{row['Kids']:.2f}"
            ])
        
        cluster_table = Table(cluster_data, colWidths=[60, 80, 80, 80, 80, 60])
        cluster_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3b82f6')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#f3f4f6')),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#d1d5db')),
        ]))
        story.append(cluster_table)
        story.append(Spacer(1, 24))

        # D·ª± ƒëo√°n quay l·∫°i
        story.append(Paragraph("3. D·ª± ƒêo√°n Kh√°ch H√†ng Quay L·∫°i", heading2_style))
        
        if churn_report:
            churn_data = [
                ["Ch·ªâ s·ªë", "Gi√° tr·ªã"],
                ["ƒê·ªô ch√≠nh x√°c", f"{churn_report['accuracy']:.2%}"],
                ["Precision (L·ªõp 0)", f"{churn_report['0']['precision']:.2%}"],
                ["Recall (L·ªõp 0)", f"{churn_report['0']['recall']:.2%}"],
                ["Precision (L·ªõp 1)", f"{churn_report['1']['precision']:.2%}"],
                ["Recall (L·ªõp 1)", f"{churn_report['1']['recall']:.2%}"]
            ]
            
            churn_table = Table(churn_data, colWidths=[150, 100])
            churn_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3b82f6')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#f3f4f6')),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#d1d5db')),
            ]))
            story.append(churn_table)
            story.append(Spacer(1, 24))

        # D·ª± b√°o chi ti√™u
        story.append(Paragraph("4. D·ª± B√°o Chi Ti√™u", heading2_style))
        if prophet_df is not None and forecast is not None:
            forecast_data = [
                ["Th·ªùi gian", "Chi ti√™u d·ª± b√°o", "Gi·ªõi h·∫°n d∆∞·ªõi", "Gi·ªõi h·∫°n tr√™n"],
                [
                    forecast['ds'].dt.strftime('%Y-%m-%d').iloc[-1],
                    f"{forecast['yhat'].iloc[-1]:,.2f}",
                    f"{forecast['yhat_lower'].iloc[-1]:,.2f}",
                    f"{forecast['yhat_upper'].iloc[-1]:,.2f}"
                ]
            ]
            
            forecast_table = Table(forecast_data, colWidths=[100, 80, 80, 80])
            forecast_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#3b82f6')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#f3f4f6')),
                ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#d1d5db')),
            ]))
            story.append(forecast_table)
        
        story.append(Spacer(1, 24))
        story.append(Paragraph("B√°o c√°o ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông b·ªüi H·ªá th·ªëng Ph√¢n t√≠ch Kh√°ch h√†ng", styles['Italic']))

        doc.build(story)
        buffer.seek(0)
        return buffer
    except Exception as e:
        logger.error(f"L·ªói t·∫°o b√°o c√°o PDF: {str(e)}", exc_info=True)
        return None

# H√†m t·∫°o dashboard
def create_dashboard(df, df_clusters, churn_report, prophet_df, forecast, ssd, silhouette_scores):
    try:
        st.subheader("T·ªïng Quan Ph√¢n T√≠ch")
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("T·ªïng S·ªë Kh√°ch H√†ng", f"{len(df):,}")
        with col2:
            st.metric("Chi Ti√™u Trung B√¨nh", f"{df['Expenses'].mean():,.2f}")
        with col3:
            st.metric("X√°c Su·∫•t Quay L·∫°i TB", f"{df_clusters['Churn_Probability'].mean():.2%}")
        with col4:
            st.metric("S·ªë C·ª•m", df_clusters['Cluster'].nunique())

        # Ph√¢n b·ªë c·ª•m v√† tr√¨nh ƒë·ªô h·ªçc v·∫•n
        col1, col2 = st.columns(2)
        with col1:
            fig_pie = px.pie(df_clusters, names='Cluster', title='Ph√¢n B·ªë C·ª•m Kh√°ch H√†ng',
                            color_discrete_sequence=px.colors.qualitative.Pastel)
            fig_pie.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_pie, use_container_width=True)
        with col2:
            fig_bar = px.histogram(df, x='Education', title='Ph√¢n B·ªë Tr√¨nh ƒê·ªô H·ªçc V·∫•n',
                                  color='Education', 
                                  color_discrete_sequence=px.colors.qualitative.Pastel)
            fig_bar.update_layout(showlegend=False)
            st.plotly_chart(fig_bar, use_container_width=True)

        # Xu h∆∞·ªõng chi ti√™u
        st.subheader("Xu H∆∞·ªõng Chi Ti√™u")
        fig_trend = go.Figure()
        fig_trend.add_trace(go.Scatter(
            x=prophet_df['ds'], y=prophet_df['y'], 
            mode='lines', name='Th·ª±c T·∫ø',
            line=dict(color='#3b82f6', width=2)
        ))
        fig_trend.add_trace(go.Scatter(
            x=forecast['ds'], y=forecast['yhat'], 
            mode='lines', name='D·ª± B√°o',
            line=dict(color='#10b981', width=2, dash='dot')
        ))
        fig_trend.add_trace(go.Scatter(
            x=forecast['ds'], y=forecast['yhat_upper'], 
            fill=None, mode='lines',
            line=dict(width=0), showlegend=False
        ))
        fig_trend.add_trace(go.Scatter(
            x=forecast['ds'], y=forecast['yhat_lower'], 
            fill='tonexty', mode='lines',
            fillcolor='rgba(59, 130, 246, 0.2)',
            line=dict(width=0), name='Kho·∫£ng Tin C·∫≠y'
        ))
        fig_trend.update_layout(
            title='Xu H∆∞·ªõng Chi Ti√™u Theo Th·ªùi Gian',
            xaxis_title='Ng√†y',
            yaxis_title='Chi Ti√™u',
            hovermode='x unified',
            template='plotly_white'
        )
        st.plotly_chart(fig_trend, use_container_width=True)

        # Ph√¢n t√≠ch t·ª´ng c·ª•m
        st.subheader("Ph√¢n T√≠ch T·ª´ng C·ª•m")
        cluster_summary = df_clusters.groupby('Cluster').agg({
            'Income': ['mean', 'median', 'std'], 
            'Expenses': ['mean', 'median', 'std'], 
            'TotalNumPurchases': ['mean', 'median'], 
            'Churn_Probability': 'mean',
            'Kids': 'mean'
        }).round(2)
        st.dataframe(cluster_summary.style.background_gradient(cmap='Blues'))

        # Elbow v√† Silhouette Plot
        st.subheader("X√°c ƒê·ªãnh S·ªë C·ª•m T·ªëi ∆Øu")
        col1, col2 = st.columns(2)
        with col1:
            fig_elbow = go.Figure()
            fig_elbow.add_trace(go.Scatter(
                x=list(range(2, len(ssd)+2)), y=ssd, 
                mode='lines+markers', 
                line=dict(color='#3b82f6', width=2),
                marker=dict(size=8, color='#3b82f6')
            ))
            fig_elbow.update_layout(
                title='Elbow Method',
                xaxis_title='S·ªë C·ª•m',
                yaxis_title='T·ªïng B√¨nh Ph∆∞∆°ng Kho·∫£ng C√°ch',
                template='plotly_white'
            )
            st.plotly_chart(fig_elbow, use_container_width=True)
        with col2:
            fig_silhouette = go.Figure()
            fig_silhouette.add_trace(go.Scatter(
                x=list(range(2, len(silhouette_scores)+2)), y=silhouette_scores, 
                mode='lines+markers',
                line=dict(color='#10b981', width=2),
                marker=dict(size=8, color='#10b981')
            ))
            fig_silhouette.update_layout(
                title='Silhouette Score',
                xaxis_title='S·ªë C·ª•m',
                yaxis_title='ƒêi·ªÉm Silhouette',
                template='plotly_white'
            )
            st.plotly_chart(fig_silhouette, use_container_width=True)

        # N√∫t t·∫£i xu·ªëng
        st.subheader("T·∫£i Xu·ªëng K·∫øt Qu·∫£")
        col1, col2 = st.columns(2)
        with col1:
            # T·∫£i xu·ªëng b√°o c√°o PDF
            pdf_buffer = generate_pdf_report(df, df_clusters, churn_report, prophet_df, forecast)
            if pdf_buffer:
                st.download_button(
                    label="üìÑ T·∫£i xu·ªëng B√°o C√°o PDF",
                    data=pdf_buffer,
                    file_name="customer_analysis_report.pdf",
                    mime="application/pdf",
                    use_container_width=True
                )
        with col2:
            # T·∫£i xu·ªëng d·ªØ li·ªáu c·ª•m
            csv = df_clusters.to_csv(index=False)
            st.download_button(
                label="üìä T·∫£i xu·ªëng d·ªØ li·ªáu c·ª•m (CSV)",
                data=csv,
                file_name="customer_clusters.csv",
                mime="text/csv",
                use_container_width=True
            )
    except Exception as e:
        st.error(f"L·ªói khi t·∫°o dashboard: {str(e)}")

# Giao di·ªán ch√≠nh
def main():
    st.title("üìä Ph√¢n T√≠ch Kh√°ch H√†ng")
    st.markdown("""
        ·ª®ng d·ª•ng n√†y gi√∫p ph√¢n t√≠ch d·ªØ li·ªáu kh√°ch h√†ng, bao g·ªìm th·ªëng k√™, ph√¢n c·ª•m, d·ª± ƒëo√°n kh√°ch h√†ng quay l·∫°i, 
        d·ª± b√°o xu h∆∞·ªõng chi ti√™u, v√† ma tr·∫≠n t∆∞∆°ng quan. Vui l√≤ng t·∫£i file CSV theo ƒë·ªãnh d·∫°ng y√™u c·∫ßu.
        
        **üìå Y√™u c·∫ßu file CSV:** Ph·∫£i ch·ª©a c√°c c·ªôt b·∫Øt bu·ªôc nh∆∞ ID, Dt_Customer, Income, Kidhome, Teenhome, 
        Recency, c√°c c·ªôt Mnt (chi ti√™u), Num (s·ªë l·∫ßn mua), AcceptedCmp (chi·∫øn d·ªãch), Complain, Response.
    """)

    # Kh·ªüi t·∫°o session_state
    if 'df' not in st.session_state:
        st.session_state.df = None
        st.session_state.numerical_columns = None
        st.session_state.categorical_columns = None
        st.session_state.binary_columns = None
        st.session_state.df_clusters = None
        st.session_state.X_scaled = None
        st.session_state.scaler = None
        st.session_state.X_encoded = None
        st.session_state.ssd = None
        st.session_state.silhouette_scores = None
        st.session_state.churn_report = None
        st.session_state.prophet_df = None
        st.session_state.forecast = None

    # T·∫£i file CSV
    with st.expander("üì§ T·∫£i l√™n d·ªØ li·ªáu", expanded=True):
        uploaded_file = st.file_uploader("Ch·ªçn file CSV", type="csv", help="File CSV ph·∫£i c√≥ ƒë·ªãnh d·∫°ng ph√π h·ª£p")
        if uploaded_file:
            with st.spinner("ƒêang x·ª≠ l√Ω d·ªØ li·ªáu..."):
                try:
                    df = pd.read_csv(uploaded_file, sep='\t')
                    df, numerical_columns, categorical_columns, binary_columns, error = preprocess_data(df)
                    if error:
                        st.error(f"‚ùå L·ªói: {error}")
                    else:
                        st.session_state.df = df
                        st.session_state.numerical_columns = numerical_columns
                        st.session_state.categorical_columns = categorical_columns
                        st.session_state.binary_columns = binary_columns
                        st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i v√† x·ª≠ l√Ω th√†nh c√¥ng!")
                except Exception as e:
                    st.error(f"‚ùå L·ªói khi ƒë·ªçc file: {str(e)}")

    # Thanh ƒëi·ªÅu h∆∞·ªõng
    tabs = st.tabs(["üìä T·ªïng Quan", "üìà Th·ªëng K√™", "üîç Ph√¢n C·ª•m", "üéØ D·ª± ƒêo√°n", "üìÖ D·ª± B√°o", "üîÑ T∆∞∆°ng Quan", "üìñ H∆∞·ªõng D·∫´n"])

    # Tab T·ªïng Quan
    with tabs[0]:
        st.header("Dashboard T·ªïng Quan")
        if st.session_state.df is not None:
            with st.spinner("ƒêang ph√¢n t√≠ch d·ªØ li·ªáu..."):
                # T√≠nh to√°n ph√¢n c·ª•m v·ªõi s·ªë c·ª•m m·∫∑c ƒë·ªãnh (3 n·∫øu ch∆∞a c√≥ silhouette_scores)
                if st.session_state.silhouette_scores is None:
                    default_clusters = 3
                else:
                    default_clusters = np.argmax(st.session_state.silhouette_scores) + 2
                
                df_clusters, X_scaled, scaler, X_encoded, ssd, silhouette_scores, error = cluster_analysis(
                    st.session_state.df, st.session_state.numerical_columns, n_clusters=default_clusters)
                
                if error:
                    st.error(f"‚ùå L·ªói ph√¢n c·ª•m: {error}")
                else:
                    df_clusters, churn_report, error = churn_prediction(df_clusters, X_scaled)
                    if error:
                        st.error(f"‚ùå L·ªói d·ª± ƒëo√°n: {error}")
                    else:
                        prophet_df, forecast, error = trend_forecasting(st.session_state.df)
                        if error:
                            st.error(f"‚ùå L·ªói d·ª± b√°o: {error}")
                        else:
                            st.session_state.df_clusters = df_clusters
                            st.session_state.X_scaled = X_scaled
                            st.session_state.scaler = scaler
                            st.session_state.X_encoded = X_encoded
                            st.session_state.ssd = ssd
                            st.session_state.silhouette_scores = silhouette_scores
                            st.session_state.churn_report = churn_report
                            st.session_state.prophet_df = prophet_df
                            st.session_state.forecast = forecast
                            create_dashboard(st.session_state.df, df_clusters, churn_report, prophet_df, forecast, ssd, silhouette_scores)
        else:
            st.info("‚ÑπÔ∏è Vui l√≤ng t·∫£i file CSV ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")

    # Tab Th·ªëng K√™
    with tabs[1]:
        st.header("Th·ªëng K√™ D·ªØ Li·ªáu")
        if st.session_state.df is not None:
            st.write("### Th·ªëng K√™ M√¥ T·∫£")
            st.dataframe(st.session_state.df.describe().style.background_gradient(cmap='Blues'))
            
            col1, col2 = st.columns(2)
            with col1:
                fig_hist = px.histogram(st.session_state.df, x='Income', title='Ph√¢n B·ªë Thu Nh·∫≠p',
                                       nbins=20, color_discrete_sequence=['#3b82f6'])
                st.plotly_chart(fig_hist, use_container_width=True)
            with col2:
                fig_box = px.box(st.session_state.df, y='Expenses', title='Boxplot Chi Ti√™u',
                                 color_discrete_sequence=['#10b981'])
                st.plotly_chart(fig_box, use_container_width=True)
            
            # Hi·ªÉn th·ªã ph√¢n b·ªë cho c√°c c·ªôt s·ªë
            for column in st.session_state.numerical_columns:
                fig_hist = px.histogram(st.session_state.df, x=column, title=f'Ph√¢n B·ªë c·ªßa {column}', 
                                       nbins=20, color_discrete_sequence=['#3b82f6'])
                st.plotly_chart(fig_hist, use_container_width=True)
            
            # Hi·ªÉn th·ªã ph√¢n b·ªë cho c√°c c·ªôt ph√¢n lo·∫°i
            for column in st.session_state.categorical_columns + st.session_state.binary_columns:
                fig_count = px.histogram(st.session_state.df, x=column, title=f'Ph√¢n B·ªë c·ªßa {column}',
                                         color=column, color_discrete_sequence=px.colors.qualitative.Pastel)
                fig_count.update_layout(showlegend=False)
                st.plotly_chart(fig_count, use_container_width=True)
            
            # N√∫t t·∫£i xu·ªëng th·ªëng k√™
            csv = st.session_state.df.describe().to_csv()
            st.download_button(
                label="üì• T·∫£i xu·ªëng th·ªëng k√™ (CSV)",
                data=csv,
                file_name="statistics.csv",
                mime="text/csv"
            )
        else:
            st.info("‚ÑπÔ∏è Vui l√≤ng t·∫£i file CSV ƒë·ªÉ xem th·ªëng k√™.")

    # Tab Ph√¢n C·ª•m
    with tabs[2]:
        st.header("Ph√¢n C·ª•m Kh√°ch H√†ng")
        if st.session_state.df is not None:
            if st.session_state.silhouette_scores is None:
                default_n_clusters = 3
            else:
                default_n_clusters = np.argmax(st.session_state.silhouette_scores) + 2
            
            n_clusters = st.slider("Ch·ªçn s·ªë l∆∞·ª£ng c·ª•m", min_value=2, max_value=10, value=default_n_clusters)
            
            with st.spinner("ƒêang ph√¢n c·ª•m..."):
                df_clusters, X_scaled, scaler, X_encoded, ssd, silhouette_scores, error = cluster_analysis(
                    st.session_state.df, st.session_state.numerical_columns, n_clusters)
                
                if error:
                    st.error(f"‚ùå L·ªói ph√¢n c·ª•m: {error}")
                else:
                    st.write(f"### S·ªë c·ª•m ƒë∆∞·ª£c ch·ªçn: {n_clusters}")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        fig1 = px.scatter(df_clusters, x='Income', y='Expenses', color='Cluster',
                                         title='Ph√¢n C·ª•m (Thu Nh·∫≠p vs Chi Ti√™u)',
                                         color_discrete_sequence=px.colors.qualitative.Pastel)
                        st.plotly_chart(fig1, use_container_width=True)
                    with col2:
                        fig2 = px.scatter(df_clusters, x='Income', y='TotalNumPurchases', color='Cluster',
                                         title='Ph√¢n C·ª•m (Thu Nh·∫≠p vs T·ªïng S·ªë Mua H√†ng)',
                                         color_discrete_sequence=px.colors.qualitative.Pastel)
                        st.plotly_chart(fig2, use_container_width=True)
                    
                    # Hi·ªÉn th·ªã boxplot cho t·ª´ng c·ª•m
                    for col in st.session_state.numerical_columns:
                        fig = px.box(df_clusters, x='Cluster', y=col, title=f'Boxplot c·ªßa {col} theo C·ª•m',
                                     color='Cluster', color_discrete_sequence=px.colors.qualitative.Pastel)
                        fig.update_layout(showlegend=False)
                        st.plotly_chart(fig, use_container_width=True)
                    
                    # Hi·ªÉn th·ªã ph√¢n b·ªë ph√¢n lo·∫°i cho t·ª´ng c·ª•m
                    for col in st.session_state.categorical_columns:
                        data = df_clusters.groupby(['Cluster', col]).size().unstack().fillna(0)
                        fig = go.Figure(data=[
                            go.Bar(name=val, x=data.index, y=data[val]) for val in data.columns
                        ])
                        fig.update_layout(
                            barmode='stack', 
                            title=f'Ph√¢n B·ªë {col} Theo C·ª•m',
                            xaxis_title='C·ª•m', 
                            yaxis_title='S·ªë L∆∞·ª£ng',
                            legend_title=col
                        )
                        st.plotly_chart(fig, use_container_width=True)
                    
                    # N√∫t t·∫£i xu·ªëng d·ªØ li·ªáu c·ª•m
                    csv = df_clusters.to_csv(index=False)
                    st.download_button(
                        label="üì• T·∫£i xu·ªëng d·ªØ li·ªáu c·ª•m (CSV)",
                        data=csv,
                        file_name="customer_clusters.csv",
                        mime="text/csv"
                    )
        else:
            st.info("‚ÑπÔ∏è Vui l√≤ng t·∫£i file CSV ƒë·ªÉ ph√¢n c·ª•m.")

    # Tab D·ª± ƒêo√°n
    with tabs[3]:
        st.header("D·ª± ƒêo√°n Kh√°ch H√†ng Quay L·∫°i")
        if st.session_state.df_clusters is not None and 'Churn_Probability' in st.session_state.df_clusters.columns:
            st.write("### B√°o C√°o D·ª± ƒêo√°n")
            st.json(st.session_state.churn_report)
            
            st.write("### X√°c Su·∫•t Kh√°ch H√†ng Quay L·∫°i")
            st.dataframe(st.session_state.df_clusters[['Income', 'Expenses', 'Churn_Probability']].sort_values('Churn_Probability', ascending=False))
            
            fig = px.histogram(st.session_state.df_clusters, x='Churn_Probability', 
                              title='Ph√¢n B·ªë X√°c Su·∫•t Quay L·∫°i',
                              nbins=20, color_discrete_sequence=['#3b82f6'])
            st.plotly_chart(fig, use_container_width=True)
            
            # N√∫t t·∫£i xu·ªëng d·ª± ƒëo√°n
            csv = st.session_state.df_clusters[['Income', 'Expenses', 'Churn_Probability']].to_csv(index=False)
            st.download_button(
                label="üì• T·∫£i xu·ªëng d·ªØ li·ªáu d·ª± ƒëo√°n (CSV)",
                data=csv,
                file_name="churn_predictions.csv",
                mime="text/csv"
            )
        else:
            st.info("‚ÑπÔ∏è Vui l√≤ng t·∫£i file CSV v√† ch·∫°y ph√¢n t√≠ch t·ªïng quan tr∆∞·ªõc.")

    # Tab D·ª± B√°o
    with tabs[4]:
        st.header("D·ª± B√°o Xu H∆∞·ªõng Chi Ti√™u")
        if st.session_state.prophet_df is not None and st.session_state.forecast is not None:
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=st.session_state.prophet_df['ds'], y=st.session_state.prophet_df['y'], 
                mode='lines', name='Th·ª±c T·∫ø',
                line=dict(color='#3b82f6', width=2)
            ))
            fig.add_trace(go.Scatter(
                x=st.session_state.forecast['ds'], y=st.session_state.forecast['yhat'], 
                mode='lines', name='D·ª± B√°o',
                line=dict(color='#10b981', width=2, dash='dot')
            ))
            fig.add_trace(go.Scatter(
                x=st.session_state.forecast['ds'], y=st.session_state.forecast['yhat_upper'], 
                fill=None, mode='lines', line=dict(width=0), showlegend=False
            ))
            fig.add_trace(go.Scatter(
                x=st.session_state.forecast['ds'], y=st.session_state.forecast['yhat_lower'], 
                fill='tonexty', mode='lines',
                fillcolor='rgba(59, 130, 246, 0.2)',
                line=dict(width=0), name='Kho·∫£ng Tin C·∫≠y'
            ))
            fig.update_layout(
                title='D·ª± B√°o Chi Ti√™u Theo Th·ªùi Gian',
                xaxis_title='Ng√†y',
                yaxis_title='Chi Ti√™u',
                hovermode='x unified',
                template='plotly_white'
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # Hi·ªÉn th·ªã d·ªØ li·ªáu d·ª± b√°o
            st.write("### D·ªØ Li·ªáu D·ª± B√°o")
            st.dataframe(st.session_state.forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail(12))
            
            # N√∫t t·∫£i xu·ªëng d·ª± b√°o
            csv = st.session_state.forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].to_csv(index=False)
            st.download_button(
                label="üì• T·∫£i xu·ªëng d·ªØ li·ªáu d·ª± b√°o (CSV)",
                data=csv,
                file_name="forecast.csv",
                mime="text/csv"
            )
        else:
            st.info("‚ÑπÔ∏è Vui l√≤ng t·∫£i file CSV v√† ch·∫°y ph√¢n t√≠ch t·ªïng quan tr∆∞·ªõc.")

    # Tab T∆∞∆°ng Quan
    with tabs[5]:
        st.header("Ma Tr·∫≠n T∆∞∆°ng Quan")
        if st.session_state.df is not None:
            corr_df = st.session_state.df.corr(numeric_only=True)
            fig = go.Figure(data=go.Heatmap(
                z=corr_df.values,
                x=corr_df.columns,
                y=corr_df.index,
                colorscale='RdBu',
                zmin=-1,
                zmax=1,
                hoverongaps=False
            ))
            fig.update_layout(
                title='Ma Tr·∫≠n T∆∞∆°ng Quan Gi·ªØa C√°c Bi·∫øn',
                xaxis_showgrid=False,
                yaxis_showgrid=False,
                xaxis_zeroline=False,
                yaxis_zeroline=False,
                height=600
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # N√∫t t·∫£i xu·ªëng ma tr·∫≠n t∆∞∆°ng quan
            csv = corr_df.to_csv()
            st.download_button(
                label="üì• T·∫£i xu·ªëng ma tr·∫≠n t∆∞∆°ng quan (CSV)",
                data=csv,
                file_name="correlation_matrix.csv",
                mime="text/csv"
            )
        else:
            st.info("‚ÑπÔ∏è Vui l√≤ng t·∫£i file CSV ƒë·ªÉ xem ma tr·∫≠n t∆∞∆°ng quan.")

    # Tab H∆∞·ªõng D·∫´n
    with tabs[6]:
        st.header("H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng")
        st.markdown("""
            ### üìå H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng

            1. **T·∫£i file CSV**:
               - T·∫£i file CSV m·ªôt l·∫ßn ·ªü ph·∫ßn ƒë·∫ßu giao di·ªán. File c·∫ßn c√≥ ƒë·ªãnh d·∫°ng gi·ªëng file m·∫´u.
               - C√°c c·ªôt b·∫Øt bu·ªôc: `ID`, `Dt_Customer` (dd-mm-yyyy), `Income`, `Kidhome`, `Teenhome`, `Recency`, 
                 `MntWines`, `MntFruits`, `MntMeatProducts`, `MntFishProducts`, `MntSweetProducts`, `MntGoldProds`,
                 `NumDealsPurchases`, `NumWebPurchases`, `NumCatalogPurchases`, `NumStorePurchases`, 
                 `AcceptedCmp1`, `AcceptedCmp2`, `AcceptedCmp3`, `AcceptedCmp4`, `AcceptedCmp5`, `Complain`, `Response`.

            2. **Ch·ªçn tab ph√¢n t√≠ch**:
               - **T·ªïng Quan**: Dashboard t√≥m t·∫Øt v·ªõi c√°c s·ªë li·ªáu quan tr·ªçng
               - **Th·ªëng K√™**: Th·ªëng k√™ m√¥ t·∫£ v√† ph√¢n b·ªë d·ªØ li·ªáu
               - **Ph√¢n C·ª•m**: Ph√¢n nh√≥m kh√°ch h√†ng v·ªõi K-Means
               - **D·ª± ƒêo√°n**: D·ª± ƒëo√°n kh·∫£ nƒÉng kh√°ch h√†ng quay l·∫°i
               - **D·ª± B√°o**: D·ª± b√°o xu h∆∞·ªõng chi ti√™u trong t∆∞∆°ng lai
               - **T∆∞∆°ng Quan**: M·ªëi quan h·ªá gi·ªØa c√°c bi·∫øn s·ªë
               - **H∆∞·ªõng D·∫´n**: H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng chi ti·∫øt

            3. **T·∫£i xu·ªëng k·∫øt qu·∫£**:
               - T·∫£i xu·ªëng d·ªØ li·ªáu CSV ho·∫∑c b√°o c√°o PDF t·ª´ c√°c tab t∆∞∆°ng ·ª©ng

            ### üõ†Ô∏è Y√™u c·∫ßu h·ªá th·ªëng
            - M√¥i tr∆∞·ªùng Anaconda v·ªõi Python 3.9+
            - C√°c th∆∞ vi·ªán c·∫ßn thi·∫øt: `streamlit`, `pandas`, `numpy`, `scipy`, `scikit-learn`, `plotly`, `prophet`, `reportlab`

            ### ‚ö†Ô∏è Kh·∫Øc ph·ª•c l·ªói th∆∞·ªùng g·∫∑p
            - **L·ªói thi·∫øu c·ªôt**: Ki·ªÉm tra file CSV c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng kh√¥ng
            - **L·ªói ƒë·ªãnh d·∫°ng ng√†y**: ƒê·∫£m b·∫£o c·ªôt `Dt_Customer` c√≥ ƒë·ªãnh d·∫°ng `dd-mm-yyyy`
            - **L·ªói Prophet**: C√†i ƒë·∫∑t l·∫°i Prophet v·ªõi `pip install prophet` ho·∫∑c kh·ªüi ƒë·ªông l·∫°i kernel

            ### üìß Li√™n h·ªá h·ªó tr·ª£
            N·∫øu c·∫ßn h·ªó tr·ª£, vui l√≤ng li√™n h·ªá qua email: doduytoan2201@gmail.com
        """)

if __name__ == "__main__":
    main()